# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'H:\NSCC\UI\field\SolversettingUi.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtGui, QtWidgets
from .SolvereditUi import Ui_solver_form
from ..commonfunction import *

# working_dir_name = '/home/leo/Documents/Salome-9.4/SALOME-9.4.0-UB18.04-SRC/BINARIES-UB18.04/ASTERSTUDY/lib/python3.6/site-packages/asterstudy/workingdirectory'
# Sim_mod = "laminar"
# Tur_mod = "laminar"


para_dirt = {
    "laminar":
    {
        "laminar":["U:","p:"]
    },
    "RAS":
    {
        'kEpsilon':["U:","p:","k:","epsilon:","nut:"],
        'kOmegaSST':["U:","p:","k:","omega:","nut:"],
        'SpalartAllmaras':["U:","p:","nuTilda:","nut:"],
        'LaunderSharmaKE':["U:","p:","k:","epsilon:","nut:"],
    },
    "LES":
    {
        'kEqn':["U:","p:","k:","epsilon:","nut:"],
        'SpalartAllmarasDDES':["U:","p:","k:","nut:"],
        'Smagorinsky':["U:","p:","k:","nut:"],
    }
}

class Ui_Sol_Man(QDialog):
    def __init__(self):
        super(Ui_Sol_Man, self).__init__()
        self.solver_form_Ui = QDialog() 
        self.solver_form = Ui_solver_form()
        self.solver_form.setupUi(self.solver_form_Ui)
        self.setupUi(self)
    def setupUi(self, Ui_Sol_Man,working_dir_name = None,model="laminar",turbulence_model="laminar"):
        Ui_Sol_Man.setObjectName("Ui_Sol_Man")
        Ui_Sol_Man.resize(539, 405)
        Sim_mod = model
        Tur_mod = turbulence_model
        self.working_dir_name = working_dir_name
        self.vlay = QtWidgets.QVBoxLayout(Ui_Sol_Man)
        self.group_1 = QtWidgets.QGroupBox()
        self.group_2 = QtWidgets.QGroupBox()
        self.vlay.addWidget(self.group_1)
        self.vlay.addWidget(self.group_2)
        self.gridlay = QtWidgets.QGridLayout(self.group_1)

        self.label = QtWidgets.QLabel(self.group_1)
        self.label.setText('内循环（次/时间步）:')
        self.lineEdit = QtWidgets.QLineEdit(self.group_1)
        self.lineEdit.setPlaceholderText("1")
        self.label_2 = QtWidgets.QLabel(self.group_1)
        self.label_2.setText("外循环（次/时间步）:")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.group_1)
        self.lineEdit_2.setPlaceholderText("2")
        self.nNonOrthogonalCorrectors_label = QtWidgets.QLabel('显性非正交修正项:')
        self.nNonOrthogonalCorrectors_lineedit = QtWidgets.QLineEdit()
        self.nNonOrthogonalCorrectors_lineedit.setPlaceholderText("0")

        self.gridlay.addWidget(self.label,0,0,1,1)
        self.gridlay.addWidget(self.lineEdit,0,1,1,1)
        self.gridlay.addWidget(self.label_2,0,2,1,1)
        self.gridlay.addWidget(self.lineEdit_2,0,3,1,1)
        self.gridlay.addWidget(self.nNonOrthogonalCorrectors_label,1,0,1,1)
        self.gridlay.addWidget(self.nNonOrthogonalCorrectors_lineedit,1,1,1,1)

        self.horizontalLayout = QtWidgets.QHBoxLayout(self.group_2)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.tableWidget = QtWidgets.QTableWidget(Ui_Sol_Man)
        self.tableWidget.setObjectName("tableWidget")
        para_list = para_dirt[Sim_mod][Tur_mod]
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(len(para_list))
        self.tableWidget.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.horizontalLayout.addWidget(self.tableWidget)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton = QtWidgets.QPushButton(Ui_Sol_Man)
        self.pushButton.setMinimumSize(QtCore.QSize(0, 40))
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(Ui_Sol_Man)
        self.pushButton_2.setMinimumSize(QtCore.QSize(0, 40))
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout.addWidget(self.pushButton_2)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.retranslateUi(Ui_Sol_Man)
        QtCore.QMetaObject.connectSlotsByName(Ui_Sol_Man)
        self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.tableWidget.verticalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tableWidget.setHorizontalHeaderLabels(['参数名称','详细设置'])
        self.tableWidget.horizontalHeaderItem(0).setTextAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignVCenter)
        self.tableWidget.setColumnWidth(0,120)
        self.tableWidget.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.tableWidget.setSelectionMode(QAbstractItemView.SingleSelection)

        for i,items in enumerate(para_list):
            self.lable = QtWidgets.QLabel()
            self.lable.setText(items.replace(':',''))
            self.tableWidget.setCellWidget(i,0,self.lable)

        self.pushButton.clicked.connect(self.pop_slo_edi)
        self.pushButton_2.clicked.connect(self.save_to_json_file)
        self.pushButton_2.clicked.connect(Ui_Sol_Man.reject)   

    def retranslateUi(self, Ui_Sol_Man):
        _translate = QtCore.QCoreApplication.translate
        Ui_Sol_Man.setWindowTitle(_translate("Ui_Sol_Man", "Solver Manger"))
        self.pushButton.setText(_translate("Ui_Sol_Man", "编辑"))
        self.pushButton_2.setText(_translate("Ui_Sol_Man", "确定"))

    def pop_slo_edi(self):
        para_row = self.tableWidget.currentRow()
        if para_row == -1:
            QtWidgets.QMessageBox.information(self, '错误','请先选择要编辑的参数!')
        else:
            para_name = self.tableWidget.cellWidget(para_row,0).text()
            self.solver_form_Ui.setWindowTitle('求解器参数设置（'+ para_name +'）')
            self.solver_form_Ui.show()
            self.solver_form.buttonBox.accepted.connect(self.read_to_Man)
            self.solver_form.buttonBox.accepted.connect(self.col_solver_setting)
    
    def read_to_Man(self):
        self.result = ''
        para_row = self.tableWidget.currentRow()
        para_name = self.tableWidget.cellWidget(para_row,0).text()
        target_para_list,target_value_list = self.collect_data_form_form()
        for index, items in enumerate(target_para_list):
            self.result +=  target_para_list[index] 
            self.result +=  ': '
            self.result +=  target_value_list[index]
            self.result +=  ' ;   ' +'\n'
        self.result = str(self.result)[::-1].replace("\n","",1)[::-1]
        self.textBrowser = QtWidgets.QTextBrowser()
        self.textBrowser.setText(self.result)
        self.tableWidget.setCellWidget(para_row,1,self.textBrowser)
        
        text = self.tableWidget.cellWidget(para_row,0).text()


    def col_solver_setting(self):
        para_row = self.tableWidget.currentRow()
        para_name = self.tableWidget.cellWidget(para_row,0).text() 
        para_name_final = para_name + 'Final'
        needed_index = 0
        has_final = False
        target_file = self.working_dir_name + '/system/fvSolution'
        target_para_list,target_value_list = self.collect_data_form_form()
        delifexist(target_file,'    ' +para_name)
        delifexist(target_file,'    ' +para_name_final)

        for index, item in enumerate(target_para_list[::-1]):
            if item == 'Final':                
                if target_value_list[len(target_para_list)-index-1] == 'on':
                    delifexist(target_file,'    ' +para_name_final)
                    addlabel(target_file,'solvers',para_name_final)
                    needed_index = index
                    has_final = True
        addlabel(target_file,'solvers',para_name)

        list_len = len(target_para_list)-1
        if has_final:
            for index, item in enumerate(target_para_list[::-1]):
                if index < needed_index:
                    addfile5(target_file,'    ' + para_name_final,
                        '    ' + target_para_list[list_len-index], target_value_list[list_len-index])

                if index > needed_index:
                    addfile5(target_file,'    ' + para_name,
                        '    ' + target_para_list[list_len-index], target_value_list[list_len-index])
           
            addfile5(target_file,'    ' + para_name_final,'    $' + para_name, '')
  
        else:
            for index, item in enumerate(target_para_list[::-1]):
                if item != 'Final':
                    addfile5(target_file,'    ' + para_name,
                            '    ' + target_para_list[list_len-index], target_value_list[list_len-index])
    
    def collect_data_form_form(self):
        target_para_list = []
        target_value_list = []
        para_row = self.tableWidget.currentRow()
        para_name = self.tableWidget.cellWidget(para_row,0).text()
        row_list = self.solver_form.get_visiable_row()
        for i in row_list:
            item_list = self.solver_form.GridLayout.itemAt(i).widget().children()
            for items in item_list:
                label_or_combo = items.__class__.__name__
                if label_or_combo == 'QLabel':
                    value = items.text()
                    target_para_list.append(value.rstrip(':'))
                if label_or_combo == 'QLineEdit':
                    value = items.text()
                    target_value_list.append(value)
                if label_or_combo == 'QComboBox':
                    value = items.currentText()
                    target_value_list.append(value)  
            
        # if self.solver_form.comboBox.currentIndex() == 3:
        #     del target_para_list[1]
        #     del target_value_list[1]

        return target_para_list, target_value_list
        
    def save_to_json_file(self):
        key_list = ['内循环','外循环','显性非正交修正项']
        value_list = [self.lineEdit.text(),self.lineEdit_2.text(),self.nNonOrthogonalCorrectors_lineedit.text()]

        for i in range(self.tableWidget.rowCount()):
            if self.tableWidget.cellWidget(i,1).__class__.__name__== 'QTextBrowser':
                key_list.append(i)
                value_list.append(self.tableWidget.cellWidget(i,1).toPlainText())
            else:
                pass
        save_to_json(self.working_dir_name,'solver',key_list,value_list)            
        computing_fvsolution_label_list = ['nCorrectors','nOuterCorrectors','nNonOrthogonalCorrectors']
        computing_fvsolution_res_list = [self.lineEdit.text(),self.lineEdit_2.text(),self.nNonOrthogonalCorrectors_lineedit.text()]
        for i,items in enumerate(computing_fvsolution_label_list):
            changefile(self.working_dir_name + '/system/fvSolution','    ' +  computing_fvsolution_label_list[i],computing_fvsolution_res_list[i])

    def reload(self,dictionary):
        key_list = list(dictionary['solver'].keys())
        value_list = list(dictionary['solver'].values())

        self.lineEdit.setText(value_list[0])
        self.lineEdit_2.setText(value_list[1])
        self.nNonOrthogonalCorrectors_lineedit.setText(value_list[2])
        for i in range(len(key_list)):
            if i > 2:
                self.textBrowser = QtWidgets.QTextBrowser()
                self.textBrowser.setText(value_list[i])
                self.tableWidget.setCellWidget(int(key_list[i]), 1, self.textBrowser) 

if __name__ == '__main__':  
    import sys  
    app = QApplication(sys.argv)  
    MainDialog = QDialog() 
    myWindow = Ui_Sol_Man()  
    myWindow.setupUi(MainDialog) 
    MainDialog.show()
    sys.exit(app.exec_()) 
