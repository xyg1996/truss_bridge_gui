# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'H:\NSCC\UI\field\Computingcontrol.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QDialog, QWidget
from PyQt5.QtCore import *
from ..commonfunction import *

# working_dir_name = '/usr/sw-cluster/simforge/PFsalome/SALOME-9.4.0-CO7-SRC/BINARIES-CO7/ASTERSTUDY/lib/python3.6/site-packages/asterstudy/workingdirectory'
# pimplefoam_root = '/usr/sw-cluster/simforge/PFsalome/SALOME-9.4.0-CO7-SRC/BINARIES-CO7/ASTERSTUDY/lib/python3.6/site-packages/asterstudy'

class Ui_Computing_control(QDialog):
    # compute_control_info = pyqtSignal(str)
    def __init__(self):
        super(Ui_Computing_control, self).__init__()
    def setupUi(self, dialog,working_dir_name = None,pimplefoam_root = None):
        dialog.setObjectName("dialog")
        dialog.resize(544, 365)
        self.pimplefoam_root = pimplefoam_root
        self.working_dir_name = working_dir_name
        self.verticalLayout = QtWidgets.QVBoxLayout(dialog)
        self.verticalLayout.setObjectName("verticalLayout")
        self.groupBox = QtWidgets.QGroupBox(dialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.groupBox.setSizePolicy(sizePolicy)
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.horizontalLayout_2 = QtWidgets.QVBoxLayout(self.groupBox)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setObjectName("label")
        self.horizontalLayout_3.addWidget(self.label)
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout_3.addWidget(self.lineEdit)
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_3.addWidget(self.label_2)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.horizontalLayout_3.addWidget(self.lineEdit_2)
        self.horizontalLayout_2.addLayout(self.horizontalLayout_3)
        #groupbox拓展内容
        self.nNonOrthogonalCorrectors_label = QtWidgets.QLabel('nNonOrthogonalCorrectors:')
        self.nNonOrthogonalCorrectors_lineedit = QtWidgets.QLineEdit()
        self.nNonOrthogonalCorrectors_lay = QtWidgets.QHBoxLayout()
        self.nNonOrthogonalCorrectors_lay.addWidget(self.nNonOrthogonalCorrectors_label)
        self.nNonOrthogonalCorrectors_lay.addWidget(self.nNonOrthogonalCorrectors_lineedit)
        self.horizontalLayout_2.addLayout(self.nNonOrthogonalCorrectors_lay)

        self.verticalLayout.addWidget(self.groupBox)
        self.groupBox_3 = QtWidgets.QGroupBox(dialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.groupBox_3.sizePolicy().hasHeightForWidth())
        self.groupBox_3.setSizePolicy(sizePolicy)
        self.groupBox_3.setObjectName("groupBox_3")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.groupBox_3)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.label_4 = QtWidgets.QLabel(self.groupBox_3)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 0, 2, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.groupBox_3)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 0, 0, 1, 1)
        self.lineEdit_4 = QtWidgets.QLineEdit(self.groupBox_3)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.gridLayout.addWidget(self.lineEdit_4, 0, 3, 1, 1)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.groupBox_3)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.gridLayout.addWidget(self.lineEdit_3, 0, 1, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.groupBox_3)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 1, 0, 1, 1)
        self.lineEdit_5 = QtWidgets.QLineEdit(self.groupBox_3)
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.gridLayout.addWidget(self.lineEdit_5, 1, 1, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.groupBox_3)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 1, 2, 1, 1)
        self.lineEdit_6 = QtWidgets.QLineEdit(self.groupBox_3)
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.gridLayout.addWidget(self.lineEdit_6, 1, 3, 1, 1)
        self.horizontalLayout_4.addLayout(self.gridLayout)
        self.verticalLayout.addWidget(self.groupBox_3)
        self.groupBox_2 = QtWidgets.QGroupBox(dialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.groupBox_2.sizePolicy().hasHeightForWidth())
        self.groupBox_2.setSizePolicy(sizePolicy)
        self.groupBox_2.setObjectName("groupBox_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.groupBox_2)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.radioButton = QtWidgets.QRadioButton(self.groupBox_2)
        self.radioButton.setChecked(True)
        self.radioButton.setObjectName("radioButton")
        self.verticalLayout_2.addWidget(self.radioButton)
        #是否并行计算下所有内容
        self.parallel_widget = QtWidgets.QWidget()
        self.parallel_layout = QVBoxLayout(self.parallel_widget)
        self.verticalLayout_2.addWidget(self.parallel_widget)
        self.radioButton.clicked['bool'].connect(self.parallel_widget.setVisible)
        #add a widget outside the layout
        self.parallel_comp_widget = QtWidgets.QWidget()
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.parallel_comp_widget)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_7 = QtWidgets.QLabel(self.groupBox_2)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_5.addWidget(self.label_7)
        #lineedit is changed to combobox
        self.combobox = QtWidgets.QComboBox(self.groupBox_2)
        self.horizontalLayout_5.addWidget(self.combobox)
        self.combobox.addItem('2')
        self.combobox.addItem('4')
        self.combobox.addItem('8')
        self.combobox.addItem('16')
        self.combobox.addItem('32')
        self.combobox.addItem('64')
        self.label_8 = QtWidgets.QLabel(self.groupBox_2)
        self.horizontalLayout_5.addWidget(self.label_8)
        self.combobox_2 = QtWidgets.QComboBox(self.groupBox_2)
        self.combobox_2.addItem('scotch')
        self.combobox_2.addItem('simple')
        self.combobox_2.addItem('hierachical')
        self.horizontalLayout_5.addWidget(self.combobox_2)


        self.parallel_layout.addWidget(self.parallel_comp_widget)
        self.verticalLayout.addWidget(self.groupBox_2)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.pushButton = QtWidgets.QPushButton(dialog)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.pushButton_3 = QtWidgets.QPushButton(dialog)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout.addWidget(self.pushButton_3)
        
        self.pushButton.clicked.connect(dialog.accept)
        self.pushButton_3.clicked.connect(dialog.reject)
        self.radioButton.clicked['bool'].connect(self.parallel_comp_widget.setVisible)
        self.combobox_2.currentIndexChanged['int'].connect(self.adjust_layout)
        self.pushButton.clicked.connect(self.col_control_res)

        self.Scotch_layout = QtWidgets.QHBoxLayout()
        self.Scotch_label = QtWidgets.QLabel('   Distributed:')
        self.Scotch_combo = QtWidgets.QComboBox()
        self.Scotch_combo.addItem('No')
        self.Scotch_combo.addItem('Yes')
        self.Scotch_layout.addWidget(self.Scotch_label)
        self.Scotch_layout.addWidget(self.Scotch_combo)
        self.parallel_layout.addLayout(self.Scotch_layout)

        self.Simple_widget = QtWidgets.QWidget()
        self.Simple_layout = QtWidgets.QHBoxLayout(self.Simple_widget)
        self.Simple_label_1 = QtWidgets.QLabel('   N:')
        self.Simple_lineedit_1 =QtWidgets.QLineEdit()
        # self.Simple_lineedit_2 =QtWidgets.QLineEdit()
        # self.Simple_lineedit_3 =QtWidgets.QLineEdit()
        self.Simple_label_2 = QtWidgets.QLabel('   Delta:')
        self.Simple_lineedit_4 =QtWidgets.QLineEdit()
        self.Simple_layout.addWidget(self.Simple_label_1)
        self.Simple_layout.addWidget(self.Simple_lineedit_1)
        # self.Simple_layout.addWidget(self.Simple_lineedit_2)
        # self.Simple_layout.addWidget(self.Simple_lineedit_3)
        self.Simple_layout.addWidget(self.Simple_label_2 )
        self.Simple_layout.addWidget(self.Simple_lineedit_4)
        self.parallel_layout.addWidget(self.Simple_widget)

        self.Hierachical_widget = QtWidgets.QWidget()
        self.Hierachical_layout = QtWidgets.QHBoxLayout(self.Hierachical_widget)
        self.Hierachical_label_1 = QtWidgets.QLabel('   N:')
        self.Hierachical_lineedit_1 =QtWidgets.QLineEdit()
        # self.Hierachical_lineedit_2 =QtWidgets.QLineEdit()
        # self.Hierachical_lineedit_3 =QtWidgets.QLineEdit()
        self.Hierachical_label_2 = QtWidgets.QLabel('   Delta:')
        self.Hierachical_lineedit_4 =QtWidgets.QLineEdit()
        self.Hierachical_label_3 = QtWidgets.QLabel('   Order:')
        self.Hierachical_lineedit_5 =QtWidgets.QLineEdit()
        self.Hierachical_layout.addWidget(self.Hierachical_label_1)
        self.Hierachical_layout.addWidget(self.Hierachical_lineedit_1)
        # self.Hierachical_layout.addWidget(self.Hierachical_lineedit_2)
        # self.Hierachical_layout.addWidget(self.Hierachical_lineedit_3)
        self.Hierachical_layout.addWidget(self.Hierachical_label_2 )
        self.Hierachical_layout.addWidget(self.Hierachical_lineedit_4)
        self.Hierachical_layout.addWidget(self.Hierachical_label_3 )
        self.Hierachical_layout.addWidget(self.Hierachical_lineedit_5)
        self.parallel_layout.addWidget(self.Hierachical_widget)
        self.Simple_widget.setVisible(False)
        self.Hierachical_widget.setVisible(False)

        #添加自定义function
        self.groupBox_4 = QtWidgets.QGroupBox(dialog)
        self.groupBox_4.setTitle('自定义function')
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.groupBox_4.sizePolicy().hasHeightForWidth())
        self.groupBox_4.setSizePolicy(sizePolicy)
        self.groupBox_4.setObjectName("groupBox_4")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.groupBox_4)
        self.verticalLayout.addWidget(self.groupBox_4)
        self.radioButton_2 = QtWidgets.QRadioButton()
        self.radioButton_2.setText('添加自定义function')
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.groupBox_4)
        self.plainTextEdit.setPlainText('''
probes
{
    // Where to load it from
    functionObjectLibs ( "libsampling.so" );

    type            probes;

    // Name of the directory for probe data
    name            probes;

    // Write at same frequency as fields
    outputControl   outputTime;
    outputInterval  1;

    // Fields to be probed
    fields
    (
        p U
    );

    probeLocations
    (
        ( 1e-06 0 0.01 )        // at inlet
        (0.21 -0.20999 0.01)  // at outlet1
        (0.21 0.20999 0.01)   // at outlet2
        (0.21 0 0.01)         // at central block
    );
}
        ''')
        self.plainTextEdit.setVisible(False)
        self.radioButton_2.clicked['bool'].connect(self.plainTextEdit.setVisible)
        self.horizontalLayout_6.addWidget(self.radioButton_2)
        self.horizontalLayout_6.addWidget(self.plainTextEdit)

        self.verticalLayout.addLayout(self.horizontalLayout)

        self.retranslateUi(dialog)
        QtCore.QMetaObject.connectSlotsByName(dialog)

    def retranslateUi(self, dialog):
        _translate = QtCore.QCoreApplication.translate
        dialog.setWindowTitle(_translate("dialog", "计算参数设置"))
        self.label.setText(_translate("dialog", "内循环（次/时间步）:"))
        self.label_2.setText(_translate("dialog", "外循环（次/时间步）:"))
        self.groupBox_3.setTitle(_translate("dialog", "计算参数（求解计算中可调）"))
        self.label_4.setText(_translate("dialog", "时间步长："))
        self.label_3.setText(_translate("dialog", "仿真时长："))
        self.label_5.setText(_translate("dialog", "MaxCo:"))
        self.label_6.setText(_translate("dialog", "writeInterval:"))
        self.groupBox_2.setTitle(_translate("dialog", "并行计算"))
        self.radioButton.setText(_translate("dialog", "是否并行计算"))
        self.label_7.setText(_translate("dialog", "核数："))
        self.label_8.setText(_translate("dialog", "并行方式："))
        self.pushButton.setText(_translate("dialog", "确定"))
        self.pushButton_3.setText(_translate("dialog", "取消"))

    def adjust_layout(self):
        if self.combobox_2.currentIndex() == 0:
            self.Simple_widget.setVisible(False)
            self.Hierachical_widget.setVisible(False)
        if self.combobox_2.currentIndex() == 1:
            self.Simple_widget.setVisible(True)
            self.Hierachical_widget.setVisible(False)
        if self.combobox_2.currentIndex() == 2:
            self.Simple_widget.setVisible(False)
            self.Hierachical_widget.setVisible(True)

    def col_control_res(self):
        key_list = []
        value_list = []       
        controldict_root = self.working_dir_name + '/system/controlDict'
        fvsolution_root = self.working_dir_name + '/system/fvSolution'
        decomposeParDict_root = self.working_dir_name + '/system/decomposeParDict'
        decomposeParDict_alternative_root = self.pimplefoam_root +'/alternativefile/system/decomposeParDict'
       
        computing_controldict_label_list = ['endTime ','deltaT','maxCo','writeInterval']
        computing_fvsolution_label_list = ['nCorrectors','nOuterCorrectors','nNonOrthogonalCorrectors']
        decomposeParDict_label_list = ['numberOfSubdomains','method','distributed']
        decomposeParDict_res_list = [self.combobox.currentText(), self.combobox_2.currentText()]
        # decomposeParDict_label_list_2 = []
        # decomposeParDict_res_list_2 = []
        if self.radioButton.isChecked():
            initfile(decomposeParDict_root,decomposeParDict_alternative_root)
            for items in self.parallel_widget.children():
                if items.__class__.__name__ == 'QComboBox':
                    decomposeParDict_res_list.append(items.currentText())
                if items.__class__.__name__ == 'QWidget':
                    if not items.isHidden():
                        for item in items.children():
                            if item.__class__.__name__ == 'QLineEdit':
                                decomposeParDict_res_list.append(item.text())


        if self.radioButton.isChecked():
            for i,item in enumerate(decomposeParDict_res_list[0:3]):
                changefile(decomposeParDict_root,decomposeParDict_label_list[i],
                        decomposeParDict_res_list[i])

            if self.combobox_2.currentText() == 'simple':
                decomposeParDict_label_list.extend(['    n','    delta'])
                delifexist2(decomposeParDict_root,'simpleCoeffs')
                for i,item in enumerate(decomposeParDict_label_list[3:]):
                    addfile2(decomposeParDict_root,'simpleCoeffs',item,'       ' + decomposeParDict_res_list[i+3])

            if self.combobox_2.currentText() == 'hierachical':
                decomposeParDict_label_list.extend(['    n','    delta','    order']) 
                delifexist2(decomposeParDict_root,'hierarchicalCoeffs')
                for i,item in enumerate(decomposeParDict_label_list[3:]):
                    addfile2(decomposeParDict_root,'hierarchicalCoeffs',item,'       ' + decomposeParDict_res_list[i+3])


        computing_controldict_res_list = [self.lineEdit_3.text(),self.lineEdit_4.text(),
                                        self.lineEdit_5.text(),self.lineEdit_6.text()]
        computing_fvsolution_res_list = [self.lineEdit.text(),self.lineEdit_2.text(),self.nNonOrthogonalCorrectors_lineedit.text()]
        for i,items in enumerate(computing_controldict_label_list):
            changefile(controldict_root,computing_controldict_label_list[i],computing_controldict_res_list[i]) 
        for i,items in enumerate(computing_fvsolution_label_list):
            changefile(fvsolution_root,'    ' + computing_fvsolution_label_list[i],computing_fvsolution_res_list[i]) 
       
        function_definition = '    ' + self.plainTextEdit.toPlainText().replace('\n','\n    ')
        
        delifexist2(controldict_root,'functions')
        if self.radioButton_2.isChecked():
            addfile2(controldict_root,'functions',function_definition,'')

        key_list = computing_controldict_label_list + computing_fvsolution_label_list 
        value_list = computing_controldict_res_list + computing_fvsolution_res_list 

        if self.radioButton.isChecked():
            key_list.append('is_parallel')
            value_list.append('True')
            key_list += decomposeParDict_label_list
            value_list += decomposeParDict_res_list
        else:
            key_list.append('is_serial')
            value_list.append('True')

        if self.radioButton_2.isChecked():
            key_list.append('is_function')
            value_list.append('True')
            key_list.append('functions')
            value_list.append(function_definition)

        save_to_json(self.working_dir_name,'compute_control',key_list,value_list)     

        # self.compute_control_info.emit(self.lineEdit_3.text())

    def reload(self,dictionary):
        key_list = list(dictionary['compute_control'].keys())
        value_list = list(dictionary['compute_control'].values())
        self.lineEdit.setText(value_list[4])
        self.lineEdit_2.setText(value_list[5])
        self.nNonOrthogonalCorrectors_lineedit.setText(value_list[6])
        self.lineEdit_3.setText(value_list[0])
        self.lineEdit_4.setText(value_list[1])
        self.lineEdit_5.setText(value_list[2])
        self.lineEdit_6.setText(value_list[3])
        if 'is_parallel' in key_list:
            
            self.combobox.setCurrentText(value_list[8])
            self.combobox_2.setCurrentText(value_list[9])
            self.Scotch_combo.setCurrentText(value_list[10])
            if value_list[9] == 'scotch':
                self.Simple_widget.setVisible(False)
                self.Hierachical_widget.setVisible(False)
            if value_list[9] == 'simple':
                self.Simple_widget.setVisible(True)
                self.Hierachical_widget.setVisible(False)
                self.Simple_lineedit_1.setText(value_list[11])
                self.Simple_lineedit_4.setText(value_list[12])
            if value_list[9] == 'hierachical':
                self.Simple_widget.setVisible(False)
                self.Hierachical_widget.setVisible(True)
                self.Hierachical_lineedit_1.setText(value_list[11])
                self.Hierachical_lineedit_4.setText(value_list[12])
                self.Hierachical_lineedit_5.setText(value_list[13])
        else:
            self.radioButton.setChecked(False)
            self.parallel_widget.setVisible(False)

        if 'is_function' in key_list:
            self.radioButton_2.setChecked(True)
            self.plainTextEdit.setVisible(True)
            self.plainTextEdit.setPlainText(value_list[-1])


if __name__ == '__main__':  
    import sys
    app = QApplication(sys.argv) 
    MainDialog = QDialog() 
    myDialog = Ui_Computing_control()
    myDialog.setupUi(MainDialog)
    MainDialog.show()
    sys.exit(app.exec_()) 